文件权限和所有权是Unix/Linux文件系统(如ext文件系统)最显著的特性之一。在Unix/Linux 平台工作时，经常会碰到与文件权限及所有权相关的问题
Linux系统中的每一个文件都与多种类型的权限相关联。在这些权限中，我们通常要和三类 权限打交道(用户、用户组以及其他用户)
用户(user)是文件的所有者。用户组(group)是多个用户的集合(由系统管理员指定)， 系统允许这些用户对文件进行某种形式的访问。
其他用户(others)是除文件用户或用户组之外的任何人
ls -l 列出文件的权限
drwxr-xr-x  34 yanqi  staff  1088 12 14 15:12 命令之乐
-rw-------  1 yanqi  staff       30 12 14 15:55 A.txt
第一列输出明确的了后面的输出
其中的第一个字母的对应关系:
- 普通文件
d 目录
c 字符设备
b 块设备
l 符号链接
s 套接字
p 管道
剩下的部分可以划分成三组，每组3个字符(--- --- ---)
第一组的3个字符(---)对应 用户权限(所有者)，第二组对应用户组权限，第三组对应其他用户权限
这9个字符(即9个权 限)中的每一个字符指明是否其设置了某种权限。
如果已设置，对应位置上会出现一个字符，否 则出现一个'-'，表明没有设置对应的权限

用户(权限序列:rwx------):第一个字符指定用户是否拥有文件的读权限。
如果为用户设置了读权限，r将出现在第一个字符的位置上。
第二个字符指定了写(修改)权限(w)， 第三个字符指定了用户是否拥有执行权限(x，即运行该文件的权限)。
可执行文件通常会设置执行权限。用户还有一个称为setuid(S)的特殊权限，它出现在执行权限(x) 的位置。
setuid权限允许用户以其拥有者的权限来执行可执行文件，即使这个可执行文件是由其他用户运行的
目录同样也有读、写、执行权限。不过对于目录来说，读、写、执行权限的含义有点不一样:
目录的读权限(r)允许读取目录中文件和子目录的列表
目录的写权限(w)允许在目录中创建或删除文件或目录
目录的执行权限(x)指明是否可以访问目录中的文件和子目录
用户组(权限序列:---rwx---):第二组字符指定了组权限

组权限的rwx的含义和用 户权限中的一样。组权限并没有setuid，但是有一个setgid(S)位。
它允许以同该目录拥有者所在组相同的有效组权限来允许可执行文件。但是这个组和实际发起命令的用户组未必相同

其他用户(权限序列:------rwx):最后三个字符是其他用户权限
和用户以及用户组一样，其他用户也有读、写、执行权限，但是并没有S权限(如setuid和setgid)
目录有一个特殊的权限，叫做粘滞位(sticky bit)。
如果目录设置了粘滞位，只有创建该目录的用户才能删除目录中的文件，即使用户组和其他用户也有写权限，也无能无力。
粘滞位出现在其他用户权限中的执行权限(x)位置。它使用t或T来表示。如果没有设置执行权限，但设置 了粘滞位，就使用t;如果同时设置了执行权限和粘滞位，就使用T

例子:
假设需要设置权限:rwx rw- r--
chmod u=rwx g=rw o=r filename
 u——指定用户权限
 g——指定用户组权限
 o——指定其他实体权限

可以对用户、用户组和其他用户用 + 进行添加权限，用 - 删除权限
文件已经具有权限rwx rw- r--，现在需要增加可执行权限
chmod o+x filename 
给所有权限类别(即用户、用户组和其他用户)增加可执行权限
chmod a+x filename  其中a 表示all

也可以用八进制数来设置权限
权限由3位八进制数来表示，每一位按顺序分别对应用户、用户 组和其他用户
读、写和执行权限都有与之对应的唯一的八进制数
r--=4
-w-=2
--x=1

补充内容:
1.要更改文件的所有权，可以使用chown命令
    chown user:group filename
2.设置粘带位 
粘滞位是一种应用于目录的权限类型。通过设置粘滞位，使得只有目录的所有者才能够删除 目录中的文件，
即使用户组和其他用户拥有足够的权限也不能执行删除操作
    chmod a+t directory_name
3.以递归的方式设置权限
chmod -R 777 .
-R指定以递归的方式修改权限
4.以递归的方式设置所有权
chown -R user:group .
5.以不同的身份运行可执行文件
一些可执行文件需要以不同的用户身份(启动该文件的当前用户之外的用户)，
通过文件路径来执行(如 ./executable_name)。
有一个叫做setuid的特殊文件权限，它允许其他用户以文件所有者的身份来执行文件