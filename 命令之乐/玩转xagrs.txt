我们可以用管道将一个命令的stdout(标准输出)重定向到另一个命令的stdin(标准输入)
例如:cat *.txt |grep "test"
但是，有些命令只能以命令行参数的形式接受数据，而无法通过stdin接受数据流。
在这种 情况下，我们没法用管道来提供那些只有通过命令行参数才能提供的数据
xargs 擅长将标准输入转化为命令行参数，能够处理stdin并将其转化为特定命令的命令行参数
xargs也可以将单行或多行文本输入转换成其他格式，例如单行变多行或是多行变单行
xargs命令应该紧跟在管道操作符之后，以标准输入作为主要的源数据流。
它使用stdin并通过提供命令行参数来执行其他命令
例如 : command | xargs

xargs命令把从stdin接收到的数据重新格式化，再将其作为参数提供给其他命令
 将多行输入转换成单行输出
只需要将换行符移除，再用" "(空格)进行代替，
就可以实现多行输入的转换。'\n' 被解释成一个换行符，
换行符其实就是多行文本之间的定界符。利用xargs，
我们可以用 空格替换掉换行符，这样就能够将多行文本转换成单行文本
*cat example.txt | xgrgs
 将单行输入转换成多行输出
指定每行最大的参数数量n，我们可以将任何来自stdin的文本划分成多行，每行n个参数
每一个参数都是由" "(空格)隔开的字符串。空格是默认的定界符
*cat test2.txt | xargs -n 2
xargs 选项
 可以用特定的定界符来分隔参数。用 -d 选项来指定一个定界符
 echo "spiltXspiltXspiltXspilt" | xargs -d X
 在上面的代码中，stdin是一个包含了多个X字符的字符串。我们可以用 -d将X作为输入定 界符。
 在这里，我们明确指定X作为输入定界符，而在默认情况下，xargs采用内部字段分隔符
(空格)作为输入定界符
结合-n选项，我们可以将输入划分成多行

echo "spiltXspiltXspiltXspilt" | xargs -d X -n 2

读取stdin，将格式化参数传递给命令

cat args.txt| xargs -n 1 ./cecho.sh
执行三次命令，每次使用一个参数
每次执行需要X个参数的命令时，使用 input | xargs -n x 

就第二个问题，为了在执行命令时一次性提供所有的参数，可以使用
cat args.txt | xargs bash cecho.sh

在上面的命令执行过程中，arg1是唯一的可变内容，其余部分都保持不变
cat args.txt | xargs -I {} ./cecho.sh -p {} -l
用-I的时候，命令以循环的方式执行。如果有3个参数，那么命令就会连同{}一起被执行3次。
在每一次执行中{}都会被替换为相应的参数
find 使用 xargs 

find . -type f -name "*.txt"  -print | xargs rm -f
这样做很危险。有时可能会删除不必要删除的文件。我们没法预测分隔find命令输出结果 的定界符究竟是什么('\n'或者' ')。
很多文件名中都可能会包含空格符(' ')，因此xargs 很可能会误认为它们是定界符(例如，hell text.txt会被xargs误解为hell和text.txt)

只要我们把find的输出作为xargs的输入，就必须将 -print0与find结合使用，以字符null ('\0')来分隔输出
find . -type f -name "*.txt" -print0 | xargs -0 rm -f

统计源代码文件中所有java文件的行数
find src -type f -name "*.java" -print0| xargs -d 0 wc -l 

结合stdin，巧妙的运用while语句和子shell
xargs只能以有限的几种方式来提供参数，而且它也不能为多组命令提供参数
要执行包含 来自标准输入的多个参数的命令，有一种非常灵活的方法
包含while循环的子shell可以用来读 取参数，然后通过一种巧妙的方式执行命令

cat files.txt | ( while read arg ; do cat $arg ;done )
等同于
cat files.txt | xargs -I {} cat {}

在while循环中，可以将cat $arg替换成任意数量的命令，这样我们就可以对同一个参数 执行多条命令
cmd0 | ( cmd1;cmd2;cmd3) | cmd4
如果cmd1是cd /，那么就会改变子shell工作目录，然而这种改变仅局限于子shell内部。
cmd4则完全不知道工作目录发生了变化





