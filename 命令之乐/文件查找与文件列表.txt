find命令的工作方式如下:沿着文件层次结构向下遍历，
匹配符合条件的文件，执行相应 的操作。下面来看看find命令的各种应用场景和基本用法

要列出当前目录及子目录下所有的文件和文件夹
find base_path 
bash_path可以放在任意位置(例如 /home/slynux)，find会从该位置开始向下查找
find . -print 打印文件和目录的列表
-print指明打印出匹配文件的文件名(路径)。当使用 -print时，'\n'作为用于对输出的
文件名进行分隔。就算你忽略-print，find命令仍会打印出文件名。 -print0指明使用'\0'作为匹配的文件名之间的定界符。当文件名中包含换行符时，这个方
法就有用武之地了

 根据文件名或正则表达式进行搜索(有通配符要加双引号，否则当作字符串匹配)
 find . -name "*.txt" -print
 -name 指定了文件名所必须匹配的字符串，*.txt能够匹配所有以.txt结尾的文件名
 -iname 与-name一样，只是忽略大小写
 如果想匹配多个条件中的一个，可以采用OR条件操作 (括号两边有空格，否则报错)
 \(以及\)用于将 -name "*.txt" -o -name "*.pdf"视为一个整体
 find . \( -name "*.txt" -o -name "*.sh" \)

选项-path的参数可以使用通配符来匹配文件路径。-name总是用给定的文件名进行匹配。
-path则将文件路径作为一个整体进行匹配
find . -path "*/slynux/*" 
选项-regex的参数和-path的类似，只不过-regex是基于正则表达式来匹 配文件路径的
例子：匹配.sh 或者 .py 文件
find . -regex ".*[\.sh|\.py]$"  // -iregex 忽略大小写


find也可以用“!”否定参数的含义
find . ! -name "*.txt"  查找不以txt文件结尾的
基于目录深度的搜索
find命令在使用时会遍历所有的子目录。我们可以采用深度选项-maxdepth和 -mindepth
来限制find命令遍历的目录深度

如果只允许find在当前目录中查找，深度 可以设置为1;当需要向下两级时，深度可以设置为2

如果我们想从第二级目录开始搜索，那么就使用 -mindepth设置最 小深度

find . -maxdepth 1 只查找当前目录
find . -mindepth 2 从第二季目录开始查找

-maxdepth和-mindepth应该作为find的第三个参数出现。
如果作为第4 个或之后的参数，就可能会影响到find的效率，因为它不得不进行一些不必要 的检查。
例如，如果-maxdepth作为第四个参数，-type作为第三个参数，find 首先会找出符合-type的所有文件，
然后在所有匹配的文件中再找出符合指定深 度的那些。但是如果反过来，目录深度作为第三个参数，-type作为第四个参数， 
那么find就能够在找到所有符合指定深度的文件后，再检查这些文件的类型， 这才是最有效的搜索之道
按文件类型进行搜索
Unix类系统将一切都视为文件。文件具有不同的类型，
例如普通文件、目录、字符设备、块 设备、符号链接、硬链接、套接字以及FIFO等
find . -type d 只查找目录
普通文件 f 符号链接 l 目录 d 字符设备 c 块设备 b 套接字 s FIFO p 
根据文件时间进行搜索
unix 系统每一个文件都有三种时间戳(没有所谓的创建时间的概念)
访问时间(-atime) 用户最近一次访问文件的时间
修改时间(-mtime) 文件内容最后一次被修改的时间
变化时间(-ctime) 文件元数据(例如权限或者所有权)最后一次变化的时间

-atime、-mtime、-ctime可作为find的时间选项。它们可以用整数值指定，单位是天。
这些整数值通常还带有 - 或 + :- 表示小于，+ 表示大于

打印出最近7天内被访问过的所有文件
find . -type f -atime -7

单位是分钟
-amin(访问时间)
-mmin(修改时间)
-cmin(变化时间)
打印出访问时间超过7分钟的所有文件
find . -type f -amin +7
find另一个漂亮的特性是 -newer参数。使用 -newer，
我们可以指定一个用于比较时间戳 的参考文件，然后找出比参考文件更新的(更近的修改时间)所有文件
find . -type f -newer file.txt 
找出比file.txt修改时间更近的所有文件

基于文件大小的搜索
find . -type d -size +2k 大于2k的文件
find . -type d -size -2k 小于2k的文件
find . -type d -size 2k 等于2k的文件
除了k之外还有其他单位
 b —— 块(512字节)
 c —— 字节
 w —— 字(2字节) 
 k —— 1024字节
 M —— 1024K字节 
 G —— 1024M字节


-delete可以用来删除find查找到的匹配文件
删除当前目录下所有的 .swp文件
find . -type f -name "*.swp" -delete

基于文件权限和所有权的匹配
find . -type f -perm 644 -print 打印出权限是644的文件
-perm指明find应该只匹配具有特定权限值的文件

find . -type f -name "*.php" ! -perm 644 -print 
找出没有设置好权限的php文件

find . -type f -user yanqi -print 打印出用户yanqi所有的文件

利用find 执行命令或动作
find命令可以借助选项-exec与其他命名进行结合

find . -type -user root -exec chown yanqi:root {} \; (分号必须有，作为分隔符)
在这个命令中，{}是一个与 -exec选项搭配使用的特殊字符串。对于每一个匹配的文件， 
{}会被替换成相应的文件名。
例如，find命令找到两个文件test1.txt和test2.txt，其所有者均为 slynux，那么find就会执行
例如 :
find . -regex ".*/d[a-z]*\.sh$" -exec chmod +x {} \; 
给当前目录下以d开头的sh文件赋予执行权限(-regex 匹配的是路径)
另一种写法 
find . -regex ".*/d[a-z]*\.sh$" -exec chmod +x {} + 
+代表表示把所有查找到的文件作为文件列表传进去，执行一次赋予权限的命令(和;的区别)

把找到文件拼接然后下入到单个文件
find . -regex ".*/d[a-z]*\.sh$" -exec cat {} \; > 1.out
或者(效果一样执行执行命令的次数不同)
find . -regex ".*/d[a-z]*\.sh$" -exec cat {} + > 1.out
-exec之后可以接任何命令。{}表示一个匹配。对于任何匹配的文件名，{}均会被该文件名所替换
我们使用 > 操作符将来自find的数据重定向到all_c_files.txt文件，
没有使用>>(追加)的原 因是因为find命令的全部输出就只有一个数据流(stdin)，
而只有当多个数据流被追加到单个 文件中时才有必要使用>>

让find跳过特定目录
find . \( -name ".git" -prune \) -o \( -type f -print \)
以上命令打印出不包括在.git目录中的所有文件的名称(路径)。
\( -name ".git" -prune \)的作用是用于进行排除，它指明了 .git目录应该被排除在外
\( -type f -print \)指明了需要执行的动作,这些动作需要被放置在第二个语句块中(打 印出所有文件的名称和路径)。

